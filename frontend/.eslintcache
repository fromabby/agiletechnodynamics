[{"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/index.js":"1","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/store.js":"2","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/App.js":"3","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/websiteReducers.js":"4","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/userReducers.js":"5","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Home.js":"6","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/inquiryReducers.js":"7","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutCompany.js":"8","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/productReducers.js":"9","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutObjectives.js":"10","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutHistory.js":"11","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutMissionVision.js":"12","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/EmailSent.js":"13","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/ConfirmationPage.js":"14","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Products.js":"15","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Services.js":"16","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutScope.js":"17","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/product/ProductDetails.js":"18","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Footer.js":"19","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Profile.js":"20","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/UpdatePassword.js":"21","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Header.js":"22","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/ForgotPassword.js":"23","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/UpdateProfile.js":"24","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Login.js":"25","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/Dashboard.js":"26","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListInquiries.js":"27","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListOthers.js":"28","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Contact.js":"29","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListQuotations.js":"30","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/route/ProtectedRoute.js":"31","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Register.js":"32","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/NewPassword.js":"33","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/userActions.js":"34","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/NewProduct.js":"35","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/UpdateProduct.js":"36","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ProductsList.js":"37","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/Sidebar.js":"38","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/MetaData.js":"39","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Loader.js":"40","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/productActions.js":"41","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/inquiryActions.js":"42","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/userConstants.js":"43","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/websiteConstants.js":"44","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/productConstants.js":"45","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/inquiryConstants.js":"46","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/websiteActions.js":"47","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/product/ProductDisplay.js":"48","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/UpdateInquiry.js":"49","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListArchives.js":"50","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListTrash.js":"51"},{"size":586,"mtime":1610487705946,"results":"52","hashOfConfig":"53"},{"size":1297,"mtime":1613206439481,"results":"54","hashOfConfig":"53"},{"size":4820,"mtime":1613212496953,"results":"55","hashOfConfig":"53"},{"size":956,"mtime":1613212222460,"results":"56","hashOfConfig":"53"},{"size":4152,"mtime":1612914763228,"results":"57","hashOfConfig":"53"},{"size":5171,"mtime":1613264832086,"results":"58","hashOfConfig":"53"},{"size":3875,"mtime":1613207570585,"results":"59","hashOfConfig":"53"},{"size":2217,"mtime":1612913941417,"results":"60","hashOfConfig":"53"},{"size":4538,"mtime":1613200293488,"results":"61","hashOfConfig":"53"},{"size":2778,"mtime":1612914018545,"results":"62","hashOfConfig":"53"},{"size":2950,"mtime":1612913998279,"results":"63","hashOfConfig":"53"},{"size":2335,"mtime":1612914044433,"results":"64","hashOfConfig":"53"},{"size":1021,"mtime":1612914105529,"results":"65","hashOfConfig":"53"},{"size":1037,"mtime":1612914069458,"results":"66","hashOfConfig":"53"},{"size":4563,"mtime":1612913683348,"results":"67","hashOfConfig":"53"},{"size":4060,"mtime":1612913689791,"results":"68","hashOfConfig":"53"},{"size":2443,"mtime":1612914054810,"results":"69","hashOfConfig":"53"},{"size":2290,"mtime":1613201163076,"results":"70","hashOfConfig":"53"},{"size":4047,"mtime":1612913496772,"results":"71","hashOfConfig":"53"},{"size":1904,"mtime":1613210994015,"results":"72","hashOfConfig":"53"},{"size":3044,"mtime":1612914717260,"results":"73","hashOfConfig":"53"},{"size":4261,"mtime":1612914582108,"results":"74","hashOfConfig":"53"},{"size":2261,"mtime":1612914664967,"results":"75","hashOfConfig":"53"},{"size":4999,"mtime":1612914726011,"results":"76","hashOfConfig":"53"},{"size":2689,"mtime":1612914677566,"results":"77","hashOfConfig":"53"},{"size":2961,"mtime":1613186755200,"results":"78","hashOfConfig":"53"},{"size":4312,"mtime":1613198316551,"results":"79","hashOfConfig":"53"},{"size":4200,"mtime":1613198321621,"results":"80","hashOfConfig":"53"},{"size":7769,"mtime":1612914085262,"results":"81","hashOfConfig":"53"},{"size":4209,"mtime":1613198326213,"results":"82","hashOfConfig":"53"},{"size":921,"mtime":1612914643008,"results":"83","hashOfConfig":"53"},{"size":6442,"mtime":1613186555254,"results":"84","hashOfConfig":"53"},{"size":2828,"mtime":1612781072508,"results":"85","hashOfConfig":"53"},{"size":5312,"mtime":1612837002338,"results":"86","hashOfConfig":"53"},{"size":6524,"mtime":1613183936077,"results":"87","hashOfConfig":"53"},{"size":7756,"mtime":1613193899089,"results":"88","hashOfConfig":"53"},{"size":4114,"mtime":1613183740468,"results":"89","hashOfConfig":"53"},{"size":2995,"mtime":1613115346402,"results":"90","hashOfConfig":"53"},{"size":270,"mtime":1610903258521,"results":"91","hashOfConfig":"53"},{"size":160,"mtime":1612789451971,"results":"92","hashOfConfig":"53"},{"size":4167,"mtime":1613191221870,"results":"93","hashOfConfig":"53"},{"size":3335,"mtime":1613195621693,"results":"94","hashOfConfig":"53"},{"size":1450,"mtime":1612836873081,"results":"95","hashOfConfig":"53"},{"size":433,"mtime":1613198998834,"results":"96","hashOfConfig":"53"},{"size":1292,"mtime":1612836089673,"results":"97","hashOfConfig":"53"},{"size":1032,"mtime":1613195572681,"results":"98","hashOfConfig":"53"},{"size":869,"mtime":1613212230605,"results":"99","hashOfConfig":"53"},{"size":490,"mtime":1612914627852,"results":"100","hashOfConfig":"53"},{"size":5444,"mtime":1613194748396,"results":"101","hashOfConfig":"53"},{"size":3890,"mtime":1613195351756,"results":"102","hashOfConfig":"53"},{"size":4273,"mtime":1613195845963,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"bpi0ip",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"106"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/index.js",[],["214","215"],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/store.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/App.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/websiteReducers.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/userReducers.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Home.js",["216","217","218","219","220","221","222","223","224"],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/inquiryReducers.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutCompany.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/reducers/productReducers.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutObjectives.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutHistory.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutMissionVision.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/EmailSent.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/ConfirmationPage.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Products.js",["225"],"import React, { Fragment, useState, useEffect } from 'react'\nimport '../css/products.css'\nimport '../css/bootstrap.min.css'\nimport '../fonts/font-awesome.min.css'\nimport MetaData from './layout/MetaData'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getProducts, clearErrors } from '../actions/productActions'\n\nimport ProductDisplay from './product/ProductDisplay'\nimport Loader from './layout/Loader'\nimport { useAlert } from 'react-alert'\nimport Pagination from 'react-js-pagination'\n\n\nconst Products = () => { \n    const [currentPage, setCurrentPage] = useState(1);\n    const alert = useAlert();\n    const dispatch = useDispatch();\n    const { loading, products, error, productsCount, resPerPage, filteredProductsCount } = useSelector(state => state.products);\n    const [category, setCategory] = useState('');\n\n    const categories = [\n        'Category1',\n        'Category2',\n        'Category3',\n        'Category4',\n        'Category5',\n        'Category6',\n        'Category7'\n    ]\n    \n    useEffect(() => {\n        if(error){\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n        dispatch(getProducts(currentPage, category));\n    }, [dispatch, alert, error, currentPage, category]);\n\n    function setCurrentPageNo(pageNumber) {\n        setCurrentPage(pageNumber);\n    }\n\n    let count = productsCount;\n    if(category) {\n        count = filteredProductsCount\n    }\n\n    return (\n            <Fragment>\n                {loading ? <Loader/> : \n                (\n                    <Fragment>\n                        <MetaData title={'Our Products'}/>\n                        <section id=\"products\" className=\"product-section\">\n                            <div className=\"our-products\">\n                                <div className=\"row\">\n                                    <div className=\"col-12\">\n                                        <h1 className=\"products-heading-title\">Our Products</h1>\n                                    </div>\n                                    <div className=\"col-12\">\n                                        <div classNme=\"mt-5\">\n                                            <ul className=\"pl-0\">\n                                                {categories.map( category => (\n                                                    \n                                                    <li style={{listStyleType: 'none', cursor: 'pointer', display: 'inline-block', paddingLeft: '10px', paddingRight: '10px'}}\n                                                        key={category}\n                                                        onClick={() => {setCurrentPageNo(1); setCategory(category)}}>\n                                                            <a>{category}</a>\n                                                    </li>\n                                                ))}\n                                            </ul>\n                                            {resPerPage >= count && (\n                                                <a href='/our-products'>View All Products</a>\n                                            )}\n                                        </div>\n                                    </div>\n                                    {products && products.map( product => (\n                                        <ProductDisplay key={product._id} product={product}/>\n                                    ))}\n                                </div>\n                            </div>\n                        </section>\n\n                        {resPerPage < count && (\n                            <div className=\"d-flex justify-content-center mt-5\">\n                                <Pagination \n                                    activePage={currentPage}\n                                    itemsCountPerPage={resPerPage}\n                                    totalItemsCount={productsCount}\n                                    onChange={setCurrentPageNo}\n                                    nextPageText={'Next'}\n                                    prevPageText={'Prev'}\n                                    firstPageText={'First'}\n                                    lastPageText={'Last'}\n                                    itemClass='page-item'\n                                    linkClass='page-link'\n                                />\n                            </div>\n                        )} \n                        \n                    </Fragment>\n                )}\n            </Fragment>\n    )\n}\n\nexport default Products;\n","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Services.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/AboutScope.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/product/ProductDetails.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Footer.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Profile.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/UpdatePassword.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Header.js",["226","227","228"],"import React from 'react'\nimport { Fragment } from 'react'\nimport '../../css/styles.css'\nimport '../../css/bootstrap.min.css'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAlert } from 'react-alert'\nimport { logout } from './../../actions/userActions'\n\nconst Header = () => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { user, loading } = useSelector(state => state.auth)\n\n    const logoutHandler = () => {\n        dispatch(logout());\n\n        alert.success('Logged out successfully')\n    }\n\n    return (\n        <Fragment>\n        <nav className=\"navbar navbar-dark navbar-expand-md fixed-top\">\n            <div className=\"container\">\n                <button data-toggle=\"collapse\" data-target=\"#navcol-1\" className=\"navbar-toggler\">\n                    <span className=\"sr-only\">Toggle navigation</span>\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n            <Link to=\"/\">\n                <img className=\"agile-logo\" src=\"https://res.cloudinary.com/agiletech3itf/image/upload/v1610472388/agile-tech-big-blue-logo_cej4nt.png\"/>\n            </Link>\n                <div className=\"collapse navbar-collapse\" id=\"navcol-1\">\n                    <ul className=\"nav navbar-nav flex-grow-1 justify-content-between\">\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"#\"></Link></li>\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\"><strong>Home</strong></Link></li>\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/about-company\"><strong>About Us</strong></Link></li>\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/our-products\"><strong>Products</strong></Link></li>\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/our-services\"><strong>Services</strong></Link></li>\n                        <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/contact-us\"><strong>Contact Us</strong></Link></li>\n                        {user ? (\n                                <div className=\"ml-4 dropdown d-inline\">\n                                <Link\n                                    className=\"btn dropdown-toggle text-black mr-4\"\n                                    type=\"button\"\n                                    id=\"dropDownMenuButton\"\n                                    data-toggle=\"dropdown\"\n                                    aria-aria-haspopup=\"true\"\n                                    aria-expanded=\"false\">\n                                        {user && user.name}\n                                    </Link>\n                                    <div className=\"dropdown-menu\" aria-aria-labelledby=\"dropDownMenuButton\">\n                                        <Link className=\"dropdown-item\" to=\"/dashboard\">\n                                            Dashboard\n                                        </Link>\n                                        <Link className=\"dropdown-item\" to=\"/me\">\n                                                My Profile\n                                            </Link>\n                                        {user && user.role !== 'admin' ? (\n                                            <Link className=\"dropdown-item\" to=\"/register\">\n                                                Register New Users\n                                            </Link>\n                                        ) : (\n                                            <Link></Link>\n                                        )}\n                                        <Link className=\"dropdown-item text-danger\" to=\"/\" onClick={logoutHandler}>\n                                            Log out\n                                        </Link>\n                                    </div>\n                                </div>\n                                \n                            ) : !loading && <Link to=\"/login\">\n                                <div></div>\n                            </Link>}\n                    </ul> \n                </div>\n            </div>\n        </nav>\n        </Fragment>\n    )\n}\n\nexport default Header;","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/ForgotPassword.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/UpdateProfile.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Login.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/Dashboard.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListInquiries.js",["229"],"import React, { Fragment, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\nimport Sidebar from './Sidebar'\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateInquiry, listInquiry, clearErrors } from '../../actions/inquiryActions'\n// import { DELETE_INQUIRY_RESET } from '../../constants/inquiryConstants'\n\nconst ListOrders = () => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, inquiries } = useSelector(state => state.listInquiry)\n    \n    useEffect(() => {\n        dispatch(listInquiry());\n\n        if(error){\n            alert.error(error)\n            dispatch(clearErrors())\n        }\n\n        // if(isDeleted) {}\n\n    }, [dispatch, alert, error])\n\n    const updateInquiryHandler = (id, inquiryStatus) => { \n        const formData = new FormData();\n        formData.set('inquiryStatus', inquiryStatus);\n\n        dispatch(updateInquiry(id, formData));\n    }\n    \n    const setInquiries = () => {\n        const data = { \n            columns: [\n                {\n                    label: 'Inquiry ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Last Name',\n                    field: 'lastName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'First Name',\n                    field: 'firstName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Company Name',\n                    field: 'companyName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Status',\n                    field: 'inquiryStatus',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows: []\n         }\n\n         inquiries.forEach(inquiry => {\n             if(inquiry.concernType==='Inquiry' && inquiry.inquiryStatus !== \"Deleted\"){\n                data.rows.push({\n                    id: inquiry._id,\n                    firstName: inquiry.firstName,\n                    lastName: inquiry.lastName,\n                    companyName: inquiry.companyName,\n                    inquiryStatus: inquiry.inquiryStatus && (String(inquiry.inquiryStatus).includes('Processing') || String(inquiry.inquiryStatus).includes('Resolved'))\n                        ? <p style={{ color: 'green' }}>{inquiry.inquiryStatus}</p>\n                        :  <p style={{ color: 'red' }}>{inquiry.inquiryStatus}</p>,\n                    actions:   <Fragment>\n                                <Link to={`/admin/inquiry/${inquiry._id}`} className='btn btn-primary'>\n                                    <i className='fa fa-eye'></i>\n                                </Link>\n                                <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => updateInquiryHandler(inquiry._id, \"Deleted\")}>\n                                    <i className='fa fa-trash'></i>\n                                </button>\n                            </Fragment>\n                 })\n             }\n         })\n\n         return data\n    }\n    return (\n        <Fragment>\n            <MetaData title={'Inquiries'}/>\n            <div className=\"row\">\n                <div className=\"col-4 col-md-2\">\n                    <Sidebar/>\n                </div>\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                    <h1 className='mt-5'>Inbox - Inquiry</h1>\n                    {loading? <Loader/> : (\n                        <MDBDataTable\n                            data={setInquiries()}\n                            className='px-3 ml-10'\n                            bordered\n                            striped\n                            hover\n                            entries={5}\n                        />\n                    )}\n                    </Fragment>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default ListOrders","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListOthers.js",["230"],"import React, { Fragment, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\nimport Sidebar from './Sidebar'\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateInquiry, listInquiry, clearErrors } from '../../actions/inquiryActions'\n\nconst ListOrders = () => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, inquiries } = useSelector(state => state.listInquiry)\n\n    useEffect(() => {\n        dispatch(listInquiry());\n\n        if(error){\n            alert.error(error)\n            dispatch(clearErrors())\n        }\n    }, [dispatch, alert, error])\n\n    const updateInquiryHandler = (id, inquiryStatus) => { \n        const formData = new FormData();\n        formData.set('inquiryStatus', inquiryStatus);\n\n        dispatch(updateInquiry(id, formData));\n    }\n    \n    const setInquiries = () => {\n        const data = { \n            columns: [\n                {\n                    label: 'Inquiry ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Last Name',\n                    field: 'lastName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'First Name',\n                    field: 'firstName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Company Name',\n                    field: 'companyName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Status',\n                    field: 'inquiryStatus',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows: []\n         }\n\n         inquiries.forEach(inquiry => {\n             if(inquiry.concernType==='Others'  && inquiry.inquiryStatus !== \"Deleted\"){\n                data.rows.push({\n                    id: inquiry._id,\n                    firstName: inquiry.firstName,\n                    lastName: inquiry.lastName,\n                    companyName: inquiry.companyName,\n                    inquiryStatus: inquiry.inquiryStatus && (String(inquiry.inquiryStatus).includes('Processing') || String(inquiry.inquiryStatus).includes('Resolved'))\n                        ? <p style={{ color: 'green' }}>{inquiry.inquiryStatus}</p>\n                        :  <p style={{ color: 'red' }}>{inquiry.inquiryStatus}</p>,\n                    actions:   <Fragment>\n                                <Link to={`/admin/inquiry/${inquiry._id}`} className='btn btn-primary'>\n                                    <i className='fa fa-eye'></i>\n                                </Link>\n                                <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => updateInquiryHandler(inquiry._id, \"Deleted\")}>\n                                    <i className='fa fa-trash'></i>\n                                </button>\n                            </Fragment>\n                 })\n             }\n         }) \n         return data\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Others'}/>\n            <div className=\"row\">\n                <div className=\"col-4 col-md-2\">\n                    <Sidebar/>\n                </div>\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                    <h1 className='mt-5'>Inbox - Others</h1>\n                    {loading? <Loader/> : (\n                        <MDBDataTable\n                            data={setInquiries()}\n                            className='px-3 ml-10'\n                            bordered\n                            striped\n                            hover\n                            entries={5}\n                        />\n                    )}\n                    </Fragment>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default ListOrders","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/Contact.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListQuotations.js",["231"],"import React, { Fragment, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\nimport Sidebar from './Sidebar'\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateInquiry, listInquiry, clearErrors } from '../../actions/inquiryActions'\n\nconst ListOrders = () => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, inquiries } = useSelector(state => state.listInquiry)\n\n    useEffect(() => {\n        dispatch(listInquiry());\n\n        if(error){\n            alert.error(error)\n            dispatch(clearErrors())\n        }\n    }, [dispatch, alert, error])\n\n    const updateInquiryHandler = (id, inquiryStatus) => { \n        const formData = new FormData();\n        formData.set('inquiryStatus', inquiryStatus);\n\n        dispatch(updateInquiry(id, formData));\n    }\n\n    const setInquiries = () => {\n        const data = { \n            columns: [\n                {\n                    label: 'Inquiry ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Last Name',\n                    field: 'lastName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'First Name',\n                    field: 'firstName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Company Name',\n                    field: 'companyName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Status',\n                    field: 'inquiryStatus',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows: []\n         }\n\n         inquiries.forEach(inquiry => {\n             if(inquiry.concernType==='Appointment' && inquiry.inquiryStatus !== \"Deleted\"){\n                data.rows.push({\n                    id: inquiry._id,\n                    firstName: inquiry.firstName,\n                    lastName: inquiry.lastName,\n                    companyName: inquiry.companyName,\n                    inquiryStatus: inquiry.inquiryStatus && (String(inquiry.inquiryStatus).includes('Processing') || String(inquiry.inquiryStatus).includes('Resolved'))\n                        ? <p style={{ color: 'green' }}>{inquiry.inquiryStatus}</p>\n                        :  <p style={{ color: 'red' }}>{inquiry.inquiryStatus}</p>,\n                    actions:   <Fragment>\n                                <Link to={`/admin/inquiry/${inquiry._id}`} className='btn btn-primary'>\n                                    <i className='fa fa-eye'></i>\n                                </Link>\n                                <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => updateInquiryHandler(inquiry._id, \"Deleted\")}>\n                                    <i className='fa fa-trash'></i>\n                                </button>\n                            </Fragment>\n                 })\n             }\n         })\n\n         return data\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Quotations'}/>\n            <div className=\"row\">\n                <div className=\"col-4 col-md-2\">\n                    <Sidebar/>\n                </div>\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                    <h1 className='mt-5'>Inbox - Quotations</h1>\n                    {loading? <Loader/> : (\n                        <MDBDataTable\n                            data={setInquiries()}\n                            className='px-3 ml-10'\n                            bordered\n                            striped\n                             hover\n                            entries={5}\n                        />\n                    )}\n                    </Fragment>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default ListOrders","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/route/ProtectedRoute.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/Register.js",["232"],"import React, { Fragment, useEffect, useState } from 'react'\nimport MetaData from '../layout/MetaData'\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from  'react-redux'\nimport { register, clearErrors } from './../../actions/userActions'\n\nconst Register = ( { history } ) => {\n\n    const [user, setUser] = useState({\n        name: '',\n        email: '',\n        contactNumber: '',\n        password: '',\n        confirmPassword: ''\n    })\n\n    const { name, email, contactNumber, password, confirmPassword } = user;\n    const [avatar, setAvatar] = useState('');\n    const [avatarPreview, setAvatarPreview] = useState('images/default_avatar.png');\n    const [useDefaultImage, setDefaultImage] = useState('');\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { isAuthenticated, error, loading } = useSelector(state => state.auth);\n\n    useEffect(() => {\n        if(isAuthenticated) {\n            history.push('/')\n        }\n\n        if(error){\n            alert.error(error);\n            dispatch(clearErrors());\n\n        }\n    }, [dispatch, alert, isAuthenticated, error, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('password', password);\n        formData.set('confirmPassword', confirmPassword);\n        formData.set('contactNumber', contactNumber);\n        formData.set('avatar', avatar);\n        formData.set('useDefaultImage', useDefaultImage)\n\n        dispatch(register(formData));\n    }\n\n    const onChange = e => {\n        \n        if(e.target.name === 'avatar') {\n\n            const reader = new FileReader();\n\n            reader.onload = () => {\n                if(reader.readyState === 2){\n                    setAvatarPreview(reader.result)\n                    setAvatar(reader.result)\n                }\n            }\n\n            reader.readAsDataURL(e.target.files[0])\n\n        } else if(e.target.name === 'useDefaultImage') {\n            let chkbox = document.getElementById('useDefaultImage')\n\n            if(chkbox.checked == true) {\n                setDefaultImage(true)\n            }\n            else{\n                setDefaultImage(false)\n            }\n        }\n        else {\n            setUser({\n                ...user,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Register'}/>\n            <div className=\"login-clean\">\n                <form method=\"post\" onSubmit={submitHandler} encType='multipart/form-data'>\n                    <h2 className=\"sr-only\">Register New User</h2>\n                    <div className=\"div-forgot-password\">\n                        <h3 className=\"forgot-password-heading\">Register New User</h3>\n                    </div>\n                    <div className=\"form-group\">\n                        <h6>Name</h6>\n                        <input \n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"name\"\n                            value={name}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <h6>Email</h6>\n                        <input \n                            type=\"email\" \n                            className=\"form-control\" \n                            name=\"email\"\n                            value={email}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <h6>Contact Number</h6>\n                        <input \n                            type=\"text\" \n                            className=\"form-control\" \n                            name=\"contactNumber\" \n                            value={contactNumber}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <h6>Password</h6>\n                        <input \n                            type=\"password\" \n                            className=\"form-control\" \n                            name=\"password\"\n                            value={password}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <h6>Confirm Password</h6>\n                        <input \n                            type=\"password\" \n                            className=\"form-control\" \n                            name=\"confirmPassword\"\n                            value={confirmPassword}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input \n                            type='checkbox'\n                            id='useDefaultImage'\n                            name='useDefaultImage'\n                            value={useDefaultImage}\n                            onChange={onChange}/>\n                            &nbsp;Use default image\n                        <h6>Avatar</h6>\n                        <figure className='mr-3 item-rtl'>\n                            <img \n                                src={avatarPreview}\n                                className='rounded-circle small-avatar'\n                                alt='Avatar Preview'\n                            />\n                        </figure>\n                        <input \n                            type=\"file\" \n                            id=\"avatar\" \n                            name=\"avatar\" \n                            accept=\"images/*\"\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            type=\"submit\"\n                            disabled={ loading ? true : false}\n                        >Register</button>\n                    </div>\n                </form>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Register\n","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/user/NewPassword.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/userActions.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/NewProduct.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/UpdateProduct.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ProductsList.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/Sidebar.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/MetaData.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/layout/Loader.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/productActions.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/inquiryActions.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/userConstants.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/websiteConstants.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/productConstants.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/constants/inquiryConstants.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/actions/websiteActions.js",["233","234","235"],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/product/ProductDisplay.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/UpdateInquiry.js",[],"/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListArchives.js",["236"],"import React, { Fragment, useEffect , useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { MDBDataTable } from 'mdbreact'\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\nimport Sidebar from './Sidebar'\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateInquiry, listInquiry, clearErrors } from '../../actions/inquiryActions'\n\nconst ListArchives = () => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, inquiries } = useSelector(state => state.listInquiry)\n\n    useEffect(() => {\n        dispatch(listInquiry());\n\n        if(error){\n            alert.error(error)\n            dispatch(clearErrors())\n        }\n    }, [dispatch, alert, error])\n\n    const updateInquiryHandler = (id, inquiryStatus) => { \n        const formData = new FormData();\n        formData.set('inquiryStatus', inquiryStatus);\n\n        dispatch(updateInquiry(id, formData));\n    }\n\n    const setInquiries = () => {\n        const data = { \n            columns: [\n                {\n                    label: 'Inquiry ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Last Name',\n                    field: 'lastName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'First Name',\n                    field: 'firstName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Company Name',\n                    field: 'companyName',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Concern Type',\n                    field: 'concernType',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                    sort: 'asc'\n                }\n            ],\n            rows: []\n         }\n\n         inquiries.forEach(inquiry => {\n             if(inquiry.inquiryStatus==='Resolved'){\n                data.rows.push({\n                    id: inquiry._id,\n                    firstName: inquiry.firstName,\n                    lastName: inquiry.lastName,\n                    companyName: inquiry.companyName,\n                    concernType: String(inquiry.concernType),\n                    actions:   <Fragment>\n                                <Link to={`/admin/inquiry/${inquiry._id}`} className='btn btn-primary'>\n                                    <i className='fa fa-eye'></i>\n                                </Link>\n                                <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => updateInquiryHandler(inquiry._id, \"Deleted\")}>\n                                    <i className='fa fa-trash'></i>\n                                </button>\n                            </Fragment>\n                 })\n             }\n         })\n\n         return data\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Archives'}/>\n            <div className=\"row\">\n                <div className=\"col-4 col-md-2\">\n                    <Sidebar/>\n                </div>\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                    <h1 className='mt-5'>Archives</h1>\n                    {loading? <Loader/> : (\n                        <MDBDataTable\n                            data={setInquiries()}\n                            className='px-3 ml-10'\n                            bordered\n                            striped\n                            hover\n                            entries={5}\n                        />\n                    )}\n                    </Fragment>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default ListArchives","/Users/abby/Desktop/Agile-Testing-Website/frontend/src/components/admin/ListTrash.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":53,"column":8,"nodeType":"243","endLine":53,"endColumn":32,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":63,"column":140,"nodeType":"247","messageId":"248","endLine":63,"endColumn":141},{"ruleId":"245","severity":1,"message":"246","line":63,"column":161,"nodeType":"247","messageId":"248","endLine":63,"endColumn":162},{"ruleId":"245","severity":1,"message":"246","line":81,"column":84,"nodeType":"247","messageId":"248","endLine":81,"endColumn":85},{"ruleId":"245","severity":1,"message":"246","line":81,"column":106,"nodeType":"247","messageId":"248","endLine":81,"endColumn":107},{"ruleId":"245","severity":1,"message":"246","line":84,"column":84,"nodeType":"247","messageId":"248","endLine":84,"endColumn":85},{"ruleId":"245","severity":1,"message":"246","line":84,"column":107,"nodeType":"247","messageId":"248","endLine":84,"endColumn":108},{"ruleId":"245","severity":1,"message":"246","line":90,"column":121,"nodeType":"247","messageId":"248","endLine":90,"endColumn":122},{"ruleId":"245","severity":1,"message":"246","line":90,"column":145,"nodeType":"247","messageId":"248","endLine":90,"endColumn":146},{"ruleId":"249","severity":1,"message":"250","line":69,"column":61,"nodeType":"251","endLine":69,"endColumn":64},{"ruleId":"252","severity":1,"message":"253","line":32,"column":17,"nodeType":"251","endLine":32,"endColumn":154},{"ruleId":"254","severity":1,"message":"255","line":49,"column":37,"nodeType":"256","endLine":49,"endColumn":62},{"ruleId":"254","severity":1,"message":"257","line":53,"column":68,"nodeType":"256","endLine":53,"endColumn":109},{"ruleId":"258","severity":1,"message":"259","line":1,"column":38,"nodeType":"260","messageId":"261","endLine":1,"endColumn":46},{"ruleId":"258","severity":1,"message":"259","line":1,"column":38,"nodeType":"260","messageId":"261","endLine":1,"endColumn":46},{"ruleId":"258","severity":1,"message":"259","line":1,"column":38,"nodeType":"260","messageId":"261","endLine":1,"endColumn":46},{"ruleId":"262","severity":1,"message":"263","line":72,"column":31,"nodeType":"247","messageId":"264","endLine":72,"endColumn":33},{"ruleId":"258","severity":1,"message":"265","line":3,"column":5,"nodeType":"260","messageId":"261","endLine":3,"endColumn":24},{"ruleId":"258","severity":1,"message":"266","line":4,"column":5,"nodeType":"260","messageId":"261","endLine":4,"endColumn":24},{"ruleId":"258","severity":1,"message":"267","line":5,"column":5,"nodeType":"260","messageId":"261","endLine":5,"endColumn":21},{"ruleId":"258","severity":1,"message":"259","line":1,"column":39,"nodeType":"260","messageId":"261","endLine":1,"endColumn":47},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'homePage'. Either include it or remove the dependency array.","ArrayExpression",["270"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/aria-props","aria-aria-haspopup: This attribute is an invalid ARIA attribute.","JSXAttribute","aria-aria-labelledby: This attribute is an invalid ARIA attribute.","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'UPDATE_HOME_REQUEST' is defined but never used.","'UPDATE_HOME_SUCCESS' is defined but never used.","'UPDATE_HOME_FAIL' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},"Update the dependencies array to be: [dispatch, alert, error, homePage]",{"range":"273","text":"274"},[1792,1816],"[dispatch, alert, error, homePage]"]